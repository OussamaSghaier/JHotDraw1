/* @(#)Drawing.java
 * Copyright (c) 2015 by the authors and contributors of JHotDraw.
 * You may only use this file in compliance with the accompanying license terms.
 */
package org.jhotdraw.draw;

import java.net.URL;
import javafx.event.EventHandler;
import javafx.geometry.Rectangle2D;
import javafx.scene.control.TreeItem;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import org.jhotdraw.collection.Key;
import org.jhotdraw.collection.SimpleKey;
import org.jhotdraw.draw.css.StyleableStyleManager;
import org.jhotdraw.draw.key.PaintStyleableFigureKey;

/**
 * A <em>drawing</em> is an image composed of graphical (figurative) elements.
 * <p>
 * The graphical elements are represented by {@link Figure} objects. The figure
 * objects are organized in a tree structure of which the drawing object is the
 * root.
 * <p>
 * {@code Drawing} extends {@code Figure}. This allows to compose a drawing from
 * other drawings.
 * <p>
 * A drawing has the following features:
 * <ul>
 * <li>A drawing has a style sheet which defines the visual representation of
 * JavaFX {@code Node}s generated by its figures.</li>
 * </ul>
 *
 * @author Werner Randelshofer
 * @version $Id$
 */
public interface Drawing extends Figure {

    /**
     * Holds an URL to a CSS stylesheet. If the value is null, then no
     * stylesheet is used.
     * <p>
     * This property is not styleable.</p>
     */
    public final static Key<URL> STYLESHEET = new SimpleFigureKey<>("stylesheet", URL.class, DirtyMask.of(DirtyBits.NODE, DirtyBits.LAYOUT, DirtyBits.CONNECTION_LAYOUT), null);
    /**
     * Defines the (clip) bounds of the drawing.
     * <p>
     * The bounds are used to determine the area of the drawing when it is
     * printed or exported to an image. {@code DrawingView} typically ignores this
     * value so that the user can still edit figures which are outside of
     * the bounds of the drawing.
     * </p>
     * <p>
     * This property is not styleable.</p>
     */
    public final static FigureKey<Rectangle2D> BOUNDS = new SimpleFigureKey<>("bounds", Rectangle2D.class, DirtyMask.of(DirtyBits.NODE), new Rectangle2D(0, 0, 640, 480));
    /**
     * Defines the background paint of the drawing.
     * <p>
     * A drawing typically renders a rectangle with the dimensions given
     * by {@code BOUNDS} and fills it with the {@code BACKGROUND} paint.
     * </p>
     * <p>
     * This property is styleable with the key {@code Figure.JHOTDRAW_CSS_PREFIX+"background"}.</p>
     */
    public final static PaintStyleableFigureKey BACKGROUND = new PaintStyleableFigureKey("background", Color.WHITE);

    /**
     * The CSS type selector for a drawing figure is {@code "drawing"}.
     */
    public final static String TYPE_SELECTOR = "drawing";

    @Override
    default String getTypeSelector() {
        return TYPE_SELECTOR;
    }

    /**
     * Gets the style manager.
     *
     * @return the style manager
     */
    StyleableStyleManager getStyleManager();
}
